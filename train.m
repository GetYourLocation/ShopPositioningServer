addpath('./util/');

LABEL_COUNT = 87;

trainData = readTable('data/train.csv');
trainData.imageFilename = fullfile(pwd(), 'data', 'JPEGImages', trainData.imageFilename);

% Set layers
imageinput = imageInputLayer([32, 32, 3], ...
    'DataAugmentation', 'none', ...
    'Normalization', 'zerocenter', ...
    'Name', 'imageinput');

conv_1 = convolution2dLayer(3, 32, ...
    'Stride', 1, ...
    'Padding', 1, ...
    'NumChannels', 3, ...
    'WeightLearnRateFactor', 1, ...
    'WeightL2Factor', 1, ...
    'BiasLearnRateFactor', 1, ... 
    'BiasL2Factor', 0, ...
    'Name', 'conv_1');
conv_1.Weights = randParams([3 3 3 32]);
conv_1.Bias = randParams([1 1 32]);

relu_1 = reluLayer('Name', 'relu_1');

conv_2 = convolution2dLayer(3, 32, ...
    'Stride', 1, ...
    'Padding', 1, ...
    'NumChannels', 32, ...
    'WeightLearnRateFactor', 1, ...
    'WeightL2Factor', 1, ...
    'BiasLearnRateFactor', 1, ...
    'BiasL2Factor', 0, ...
    'Name', 'conv_2');
conv_2.Weights = randParams([3 3 32 32]);
conv_2.Bias = randParams([1 1 32]);

relu_2 = reluLayer('Name', 'relu_2');

maxpool = maxPooling2dLayer(3, ...
    'Stride', 2, ...
    'Padding', 0, ...
    'Name', 'maxpool');

fc_1 = fullyConnectedLayer(64, ...
    'WeightLearnRateFactor', 1, ...
    'WeightL2Factor', 1, ...
    'BiasLearnRateFactor', 1, ...
    'BiasL2Factor', 0, ...
    'Name', 'fc_1');
fc_1.Weights = randParams([64 7200]);
fc_1.Bias = randParams([64 1]);

relu_3 = reluLayer('Name', 'relu_3');

fc_2 = fullyConnectedLayer(LABEL_COUNT, ...
    'WeightLearnRateFactor', 1, ...
    'WeightL2Factor', 1, ...
    'BiasLearnRateFactor', 1, ...
    'BiasL2Factor', 0, ...
    'Name', 'fc_2');
fc_2.Weights = randParams([LABEL_COUNT 64]);
fc_2.Bias = randParams([LABEL_COUNT 1]);

sm = softmaxLayer('Name', 'softmax');

classoutput = classificationLayer('Name', 'classoutput');

% Build layer with codes
layers = [ ...
    imageinput
    conv_1
    relu_1
    conv_2
    relu_2
    maxpool
    fc_1
    relu_3
    fc_2
    sm
    classoutput]

% Build layer from caffe prototxt
% layers = importCaffeLayers('model.prototxt');
% layers = layers'

% Training options
options = trainingOptions('sgdm', ...
    'InitialLearnRate', 1e-6, ...
    'MaxEpochs', 1, ...
    'CheckpointPath', 'checkpoint')

% Train detector
detector = trainFasterRCNNObjectDetector(trainData, layers, options)

% Predict
img = imread('data/test_1.jpg');
% img = imread('data/test_2.jpg');
[bbox, score, label] = detect(detector, img);
detectedImg = insertShape(img, 'Rectangle', bbox);
figure;
imshow(detectedImg);
